2015-9-12
1.collections
1）OrderedDict：实现字典输出的有序
2）defaultdict：使用dict时，如果引用的Key不存在，就会抛出KeyError。如果希望key不存在时，返回一个默认值，就可以用defaultdict
   1）用法： dd = defaultdict(lambda: 'N/A') or  dd = defaultdict(list)
   2) 如果希望字典后面跟着list，并且在key不存在时返回list,可以用 c=defaultdict(list), 然后用c[i].append(j)将j加入i映射的list中


2. timeit与cProfile
import timeit
def f(x,y):
    return x*y
v1 = 10
v2 = 20
def f_test(): #重新构建新的函数是因为，timeit直接调用有参数函数会出错，提示没有该变量
    f(v1,v2)
第一种方法：
t1=timeit.timeit("f_test()", setup="from __main__ import f_test")
此时也可以直接用cProfile.run('f_test')查看程序各部分具体时间
另一种方法：t1=timeit.timeit(lambda: f(x,y)),print(t1)
理由：
With lambda, we can bind the parameter a callable function. All that we're doing is creating another function,
that takes no arguments, and calls another function with arguments.
It's just as if you'd used def to create another function like that, except that the new function doesn't get a name
 (because it doesn't need one).

3. python的排序
1) 在python中用timsort,先检查有没有segment是已经排好序了的，
2) timesort比samplesort最优势的地方在于 如果数列中存在有已经排好序的segment,定义run，如果run之间存在某种规律，能总结出来

merge的规则：
Stability constrains permissible merging patterns.  For example, if we have
3 consecutive runs of lengths

    A:10000  B:20000  C:10000

we dare not merge A with C first, because if A, B and C happen to contain
a common element, it would get out of order wrt its occurrence(s) in B.  The
merging must be done as (A+B)+C or A+(B+C) instead.

So merging is always done on two consecutive runs at a time, and in-place,
although this may require some temp memory (more on that later).

merge需要delay，来发现patter，但也不能太晚，占用空间

如果有规律，快体现在：在mergesort中的merge过程中满足一定条件进入galloping mode，比较之后，是一段一段的移动。比较是A[0]与B[2**K-1]
几个点比较，综合比较次数少很多


3) lg(n!) is the information-theoretic limit for the best any comparison-based sorting algorithm can do on
  average (across all permutations: n! possibilities log2  (n!) = log2(n) + log2(n − 1) + ... + log2(2)
= Ω(n log n).).

4) eval()将字符串变为变量


5) 多进程锁
from multiprocessing import Process, Lock
def f(l, i):
    l.acquire()
    try:
        print('hello world', i)
    finally:
        l.release()

if __name__ == '__main__':
    lock = Lock()
    for num in range(10):
        Process(target=f, args=(lock, num)).start()

多进程共享1
from multiprocessing import Process, Value, Array
def f(n, a):
    n.value = 3.1415927
    for i in range(len(a)):
        a[i] = -a[i]

if __name__ == '__main__':
    num = Value('d', 0.0)
    arr = Array('i', range(10))
    p = Process(target=f, args=(num, arr))
    p.start()
    p.join()
    print(num.value)
    print(arr[:])
多进程共享2
from multiprocessing import Process, Manager
def f(d, l):
    d[1] = '1'
    d['2'] = 2
    d[0.25] = None
    l.reverse()
if __name__ == '__main__':
    with Manager() as manager:
        d = manager.dict()
        l = manager.list(range(10))
        p = Process(target=f, args=(d, l))
        p.start()
        p.join()
        print(d)
        print(l)
更多资料：https://docs.python.org/dev/library/multiprocessing.html#



